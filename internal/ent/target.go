// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jaredallard/binhost/internal/ent/pkg"
	"github.com/jaredallard/binhost/internal/ent/target"
)

// Target is the model entity for the Target schema.
type Target struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TargetQuery when eager-loading is set.
	Edges        TargetEdges `json:"edges"`
	target_pkgs  *uuid.UUID
	selectValues sql.SelectValues
}

// TargetEdges holds the relations/edges for other nodes in the graph.
type TargetEdges struct {
	// Packages in this target
	Pkgs *Pkg `json:"pkgs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PkgsOrErr returns the Pkgs value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TargetEdges) PkgsOrErr() (*Pkg, error) {
	if e.Pkgs != nil {
		return e.Pkgs, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: pkg.Label}
	}
	return nil, &NotLoadedError{edge: "pkgs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Target) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case target.FieldName:
			values[i] = new(sql.NullString)
		case target.FieldID:
			values[i] = new(uuid.UUID)
		case target.ForeignKeys[0]: // target_pkgs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Target fields.
func (t *Target) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case target.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case target.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case target.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field target_pkgs", values[i])
			} else if value.Valid {
				t.target_pkgs = new(uuid.UUID)
				*t.target_pkgs = *value.S.(*uuid.UUID)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Target.
// This includes values selected through modifiers, order, etc.
func (t *Target) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryPkgs queries the "pkgs" edge of the Target entity.
func (t *Target) QueryPkgs() *PkgQuery {
	return NewTargetClient(t.config).QueryPkgs(t)
}

// Update returns a builder for updating this Target.
// Note that you need to call Target.Unwrap() before calling this method if this Target
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Target) Update() *TargetUpdateOne {
	return NewTargetClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Target entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Target) Unwrap() *Target {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Target is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Target) String() string {
	var builder strings.Builder
	builder.WriteString("Target(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Targets is a parsable slice of Target.
type Targets []*Target
