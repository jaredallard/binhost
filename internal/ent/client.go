// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/jaredallard/binhost/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jaredallard/binhost/internal/ent/pkg"
	"github.com/jaredallard/binhost/internal/ent/target"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Pkg is the client for interacting with the Pkg builders.
	Pkg *PkgClient
	// Target is the client for interacting with the Target builders.
	Target *TargetClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Pkg = NewPkgClient(c.config)
	c.Target = NewTargetClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Pkg:    NewPkgClient(cfg),
		Target: NewTargetClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Pkg:    NewPkgClient(cfg),
		Target: NewTargetClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Pkg.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Pkg.Use(hooks...)
	c.Target.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Pkg.Intercept(interceptors...)
	c.Target.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *PkgMutation:
		return c.Pkg.mutate(ctx, m)
	case *TargetMutation:
		return c.Target.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// PkgClient is a client for the Pkg schema.
type PkgClient struct {
	config
}

// NewPkgClient returns a client for the Pkg from the given config.
func NewPkgClient(c config) *PkgClient {
	return &PkgClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pkg.Hooks(f(g(h())))`.
func (c *PkgClient) Use(hooks ...Hook) {
	c.hooks.Pkg = append(c.hooks.Pkg, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pkg.Intercept(f(g(h())))`.
func (c *PkgClient) Intercept(interceptors ...Interceptor) {
	c.inters.Pkg = append(c.inters.Pkg, interceptors...)
}

// Create returns a builder for creating a Pkg entity.
func (c *PkgClient) Create() *PkgCreate {
	mutation := newPkgMutation(c.config, OpCreate)
	return &PkgCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pkg entities.
func (c *PkgClient) CreateBulk(builders ...*PkgCreate) *PkgCreateBulk {
	return &PkgCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PkgClient) MapCreateBulk(slice any, setFunc func(*PkgCreate, int)) *PkgCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PkgCreateBulk{err: fmt.Errorf("calling to PkgClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PkgCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PkgCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pkg.
func (c *PkgClient) Update() *PkgUpdate {
	mutation := newPkgMutation(c.config, OpUpdate)
	return &PkgUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PkgClient) UpdateOne(pk *Pkg) *PkgUpdateOne {
	mutation := newPkgMutation(c.config, OpUpdateOne, withPkg(pk))
	return &PkgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PkgClient) UpdateOneID(id uuid.UUID) *PkgUpdateOne {
	mutation := newPkgMutation(c.config, OpUpdateOne, withPkgID(id))
	return &PkgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pkg.
func (c *PkgClient) Delete() *PkgDelete {
	mutation := newPkgMutation(c.config, OpDelete)
	return &PkgDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PkgClient) DeleteOne(pk *Pkg) *PkgDeleteOne {
	return c.DeleteOneID(pk.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PkgClient) DeleteOneID(id uuid.UUID) *PkgDeleteOne {
	builder := c.Delete().Where(pkg.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PkgDeleteOne{builder}
}

// Query returns a query builder for Pkg.
func (c *PkgClient) Query() *PkgQuery {
	return &PkgQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePkg},
		inters: c.Interceptors(),
	}
}

// Get returns a Pkg entity by its id.
func (c *PkgClient) Get(ctx context.Context, id uuid.UUID) (*Pkg, error) {
	return c.Query().Where(pkg.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PkgClient) GetX(ctx context.Context, id uuid.UUID) *Pkg {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PkgClient) Hooks() []Hook {
	return c.hooks.Pkg
}

// Interceptors returns the client interceptors.
func (c *PkgClient) Interceptors() []Interceptor {
	return c.inters.Pkg
}

func (c *PkgClient) mutate(ctx context.Context, m *PkgMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PkgCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PkgUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PkgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PkgDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Pkg mutation op: %q", m.Op())
	}
}

// TargetClient is a client for the Target schema.
type TargetClient struct {
	config
}

// NewTargetClient returns a client for the Target from the given config.
func NewTargetClient(c config) *TargetClient {
	return &TargetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `target.Hooks(f(g(h())))`.
func (c *TargetClient) Use(hooks ...Hook) {
	c.hooks.Target = append(c.hooks.Target, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `target.Intercept(f(g(h())))`.
func (c *TargetClient) Intercept(interceptors ...Interceptor) {
	c.inters.Target = append(c.inters.Target, interceptors...)
}

// Create returns a builder for creating a Target entity.
func (c *TargetClient) Create() *TargetCreate {
	mutation := newTargetMutation(c.config, OpCreate)
	return &TargetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Target entities.
func (c *TargetClient) CreateBulk(builders ...*TargetCreate) *TargetCreateBulk {
	return &TargetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TargetClient) MapCreateBulk(slice any, setFunc func(*TargetCreate, int)) *TargetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TargetCreateBulk{err: fmt.Errorf("calling to TargetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TargetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TargetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Target.
func (c *TargetClient) Update() *TargetUpdate {
	mutation := newTargetMutation(c.config, OpUpdate)
	return &TargetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TargetClient) UpdateOne(t *Target) *TargetUpdateOne {
	mutation := newTargetMutation(c.config, OpUpdateOne, withTarget(t))
	return &TargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TargetClient) UpdateOneID(id uuid.UUID) *TargetUpdateOne {
	mutation := newTargetMutation(c.config, OpUpdateOne, withTargetID(id))
	return &TargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Target.
func (c *TargetClient) Delete() *TargetDelete {
	mutation := newTargetMutation(c.config, OpDelete)
	return &TargetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TargetClient) DeleteOne(t *Target) *TargetDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TargetClient) DeleteOneID(id uuid.UUID) *TargetDeleteOne {
	builder := c.Delete().Where(target.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TargetDeleteOne{builder}
}

// Query returns a query builder for Target.
func (c *TargetClient) Query() *TargetQuery {
	return &TargetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTarget},
		inters: c.Interceptors(),
	}
}

// Get returns a Target entity by its id.
func (c *TargetClient) Get(ctx context.Context, id uuid.UUID) (*Target, error) {
	return c.Query().Where(target.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TargetClient) GetX(ctx context.Context, id uuid.UUID) *Target {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPkgs queries the pkgs edge of a Target.
func (c *TargetClient) QueryPkgs(t *Target) *PkgQuery {
	query := (&PkgClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(target.Table, target.FieldID, id),
			sqlgraph.To(pkg.Table, pkg.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, target.PkgsTable, target.PkgsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TargetClient) Hooks() []Hook {
	return c.hooks.Target
}

// Interceptors returns the client interceptors.
func (c *TargetClient) Interceptors() []Interceptor {
	return c.inters.Target
}

func (c *TargetClient) mutate(ctx context.Context, m *TargetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TargetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TargetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TargetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Target mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Pkg, Target []ent.Hook
	}
	inters struct {
		Pkg, Target []ent.Interceptor
	}
)
