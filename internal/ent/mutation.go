// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jaredallard/binhost/internal/ent/pkg"
	"github.com/jaredallard/binhost/internal/ent/predicate"
	"github.com/jaredallard/binhost/internal/ent/target"
	"github.com/jaredallard/binhost/internal/parser"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePkg    = "Pkg"
	TypeTarget = "Target"
)

// PkgMutation represents an operation that mutates the Pkg nodes in the graph.
type PkgMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	repository     *string
	category       *string
	name           *string
	version        *string
	package_fields **parser.PackageCommon
	clearedFields  map[string]struct{}
	target         *uuid.UUID
	clearedtarget  bool
	done           bool
	oldValue       func(context.Context) (*Pkg, error)
	predicates     []predicate.Pkg
}

var _ ent.Mutation = (*PkgMutation)(nil)

// pkgOption allows management of the mutation configuration using functional options.
type pkgOption func(*PkgMutation)

// newPkgMutation creates new mutation for the Pkg entity.
func newPkgMutation(c config, op Op, opts ...pkgOption) *PkgMutation {
	m := &PkgMutation{
		config:        c,
		op:            op,
		typ:           TypePkg,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPkgID sets the ID field of the mutation.
func withPkgID(id uuid.UUID) pkgOption {
	return func(m *PkgMutation) {
		var (
			err   error
			once  sync.Once
			value *Pkg
		)
		m.oldValue = func(ctx context.Context) (*Pkg, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Pkg.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPkg sets the old Pkg of the mutation.
func withPkg(node *Pkg) pkgOption {
	return func(m *PkgMutation) {
		m.oldValue = func(context.Context) (*Pkg, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PkgMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PkgMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Pkg entities.
func (m *PkgMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PkgMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PkgMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Pkg.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRepository sets the "repository" field.
func (m *PkgMutation) SetRepository(s string) {
	m.repository = &s
}

// Repository returns the value of the "repository" field in the mutation.
func (m *PkgMutation) Repository() (r string, exists bool) {
	v := m.repository
	if v == nil {
		return
	}
	return *v, true
}

// OldRepository returns the old "repository" field's value of the Pkg entity.
// If the Pkg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PkgMutation) OldRepository(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepository is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepository requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepository: %w", err)
	}
	return oldValue.Repository, nil
}

// ResetRepository resets all changes to the "repository" field.
func (m *PkgMutation) ResetRepository() {
	m.repository = nil
}

// SetCategory sets the "category" field.
func (m *PkgMutation) SetCategory(s string) {
	m.category = &s
}

// Category returns the value of the "category" field in the mutation.
func (m *PkgMutation) Category() (r string, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the Pkg entity.
// If the Pkg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PkgMutation) OldCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ResetCategory resets all changes to the "category" field.
func (m *PkgMutation) ResetCategory() {
	m.category = nil
}

// SetName sets the "name" field.
func (m *PkgMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PkgMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Pkg entity.
// If the Pkg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PkgMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PkgMutation) ResetName() {
	m.name = nil
}

// SetVersion sets the "version" field.
func (m *PkgMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *PkgMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Pkg entity.
// If the Pkg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PkgMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *PkgMutation) ResetVersion() {
	m.version = nil
}

// SetPackageFields sets the "package_fields" field.
func (m *PkgMutation) SetPackageFields(pc *parser.PackageCommon) {
	m.package_fields = &pc
}

// PackageFields returns the value of the "package_fields" field in the mutation.
func (m *PkgMutation) PackageFields() (r *parser.PackageCommon, exists bool) {
	v := m.package_fields
	if v == nil {
		return
	}
	return *v, true
}

// OldPackageFields returns the old "package_fields" field's value of the Pkg entity.
// If the Pkg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PkgMutation) OldPackageFields(ctx context.Context) (v *parser.PackageCommon, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPackageFields is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPackageFields requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPackageFields: %w", err)
	}
	return oldValue.PackageFields, nil
}

// ResetPackageFields resets all changes to the "package_fields" field.
func (m *PkgMutation) ResetPackageFields() {
	m.package_fields = nil
}

// SetTargetID sets the "target_id" field.
func (m *PkgMutation) SetTargetID(u uuid.UUID) {
	m.target = &u
}

// TargetID returns the value of the "target_id" field in the mutation.
func (m *PkgMutation) TargetID() (r uuid.UUID, exists bool) {
	v := m.target
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetID returns the old "target_id" field's value of the Pkg entity.
// If the Pkg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PkgMutation) OldTargetID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetID: %w", err)
	}
	return oldValue.TargetID, nil
}

// ResetTargetID resets all changes to the "target_id" field.
func (m *PkgMutation) ResetTargetID() {
	m.target = nil
}

// ClearTarget clears the "target" edge to the Target entity.
func (m *PkgMutation) ClearTarget() {
	m.clearedtarget = true
	m.clearedFields[pkg.FieldTargetID] = struct{}{}
}

// TargetCleared reports if the "target" edge to the Target entity was cleared.
func (m *PkgMutation) TargetCleared() bool {
	return m.clearedtarget
}

// TargetIDs returns the "target" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TargetID instead. It exists only for internal usage by the builders.
func (m *PkgMutation) TargetIDs() (ids []uuid.UUID) {
	if id := m.target; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTarget resets all changes to the "target" edge.
func (m *PkgMutation) ResetTarget() {
	m.target = nil
	m.clearedtarget = false
}

// Where appends a list predicates to the PkgMutation builder.
func (m *PkgMutation) Where(ps ...predicate.Pkg) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PkgMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PkgMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Pkg, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PkgMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PkgMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Pkg).
func (m *PkgMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PkgMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.repository != nil {
		fields = append(fields, pkg.FieldRepository)
	}
	if m.category != nil {
		fields = append(fields, pkg.FieldCategory)
	}
	if m.name != nil {
		fields = append(fields, pkg.FieldName)
	}
	if m.version != nil {
		fields = append(fields, pkg.FieldVersion)
	}
	if m.package_fields != nil {
		fields = append(fields, pkg.FieldPackageFields)
	}
	if m.target != nil {
		fields = append(fields, pkg.FieldTargetID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PkgMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pkg.FieldRepository:
		return m.Repository()
	case pkg.FieldCategory:
		return m.Category()
	case pkg.FieldName:
		return m.Name()
	case pkg.FieldVersion:
		return m.Version()
	case pkg.FieldPackageFields:
		return m.PackageFields()
	case pkg.FieldTargetID:
		return m.TargetID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PkgMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pkg.FieldRepository:
		return m.OldRepository(ctx)
	case pkg.FieldCategory:
		return m.OldCategory(ctx)
	case pkg.FieldName:
		return m.OldName(ctx)
	case pkg.FieldVersion:
		return m.OldVersion(ctx)
	case pkg.FieldPackageFields:
		return m.OldPackageFields(ctx)
	case pkg.FieldTargetID:
		return m.OldTargetID(ctx)
	}
	return nil, fmt.Errorf("unknown Pkg field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PkgMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pkg.FieldRepository:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepository(v)
		return nil
	case pkg.FieldCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case pkg.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case pkg.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case pkg.FieldPackageFields:
		v, ok := value.(*parser.PackageCommon)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPackageFields(v)
		return nil
	case pkg.FieldTargetID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetID(v)
		return nil
	}
	return fmt.Errorf("unknown Pkg field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PkgMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PkgMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PkgMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Pkg numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PkgMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PkgMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PkgMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Pkg nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PkgMutation) ResetField(name string) error {
	switch name {
	case pkg.FieldRepository:
		m.ResetRepository()
		return nil
	case pkg.FieldCategory:
		m.ResetCategory()
		return nil
	case pkg.FieldName:
		m.ResetName()
		return nil
	case pkg.FieldVersion:
		m.ResetVersion()
		return nil
	case pkg.FieldPackageFields:
		m.ResetPackageFields()
		return nil
	case pkg.FieldTargetID:
		m.ResetTargetID()
		return nil
	}
	return fmt.Errorf("unknown Pkg field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PkgMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.target != nil {
		edges = append(edges, pkg.EdgeTarget)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PkgMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pkg.EdgeTarget:
		if id := m.target; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PkgMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PkgMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PkgMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtarget {
		edges = append(edges, pkg.EdgeTarget)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PkgMutation) EdgeCleared(name string) bool {
	switch name {
	case pkg.EdgeTarget:
		return m.clearedtarget
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PkgMutation) ClearEdge(name string) error {
	switch name {
	case pkg.EdgeTarget:
		m.ClearTarget()
		return nil
	}
	return fmt.Errorf("unknown Pkg unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PkgMutation) ResetEdge(name string) error {
	switch name {
	case pkg.EdgeTarget:
		m.ResetTarget()
		return nil
	}
	return fmt.Errorf("unknown Pkg edge %s", name)
}

// TargetMutation represents an operation that mutates the Target nodes in the graph.
type TargetMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	name            *string
	clearedFields   map[string]struct{}
	packages        map[uuid.UUID]struct{}
	removedpackages map[uuid.UUID]struct{}
	clearedpackages bool
	done            bool
	oldValue        func(context.Context) (*Target, error)
	predicates      []predicate.Target
}

var _ ent.Mutation = (*TargetMutation)(nil)

// targetOption allows management of the mutation configuration using functional options.
type targetOption func(*TargetMutation)

// newTargetMutation creates new mutation for the Target entity.
func newTargetMutation(c config, op Op, opts ...targetOption) *TargetMutation {
	m := &TargetMutation{
		config:        c,
		op:            op,
		typ:           TypeTarget,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTargetID sets the ID field of the mutation.
func withTargetID(id uuid.UUID) targetOption {
	return func(m *TargetMutation) {
		var (
			err   error
			once  sync.Once
			value *Target
		)
		m.oldValue = func(ctx context.Context) (*Target, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Target.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTarget sets the old Target of the mutation.
func withTarget(node *Target) targetOption {
	return func(m *TargetMutation) {
		m.oldValue = func(context.Context) (*Target, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TargetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TargetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Target entities.
func (m *TargetMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TargetMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TargetMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Target.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TargetMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TargetMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Target entity.
// If the Target object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TargetMutation) ResetName() {
	m.name = nil
}

// AddPackageIDs adds the "packages" edge to the Pkg entity by ids.
func (m *TargetMutation) AddPackageIDs(ids ...uuid.UUID) {
	if m.packages == nil {
		m.packages = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.packages[ids[i]] = struct{}{}
	}
}

// ClearPackages clears the "packages" edge to the Pkg entity.
func (m *TargetMutation) ClearPackages() {
	m.clearedpackages = true
}

// PackagesCleared reports if the "packages" edge to the Pkg entity was cleared.
func (m *TargetMutation) PackagesCleared() bool {
	return m.clearedpackages
}

// RemovePackageIDs removes the "packages" edge to the Pkg entity by IDs.
func (m *TargetMutation) RemovePackageIDs(ids ...uuid.UUID) {
	if m.removedpackages == nil {
		m.removedpackages = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.packages, ids[i])
		m.removedpackages[ids[i]] = struct{}{}
	}
}

// RemovedPackages returns the removed IDs of the "packages" edge to the Pkg entity.
func (m *TargetMutation) RemovedPackagesIDs() (ids []uuid.UUID) {
	for id := range m.removedpackages {
		ids = append(ids, id)
	}
	return
}

// PackagesIDs returns the "packages" edge IDs in the mutation.
func (m *TargetMutation) PackagesIDs() (ids []uuid.UUID) {
	for id := range m.packages {
		ids = append(ids, id)
	}
	return
}

// ResetPackages resets all changes to the "packages" edge.
func (m *TargetMutation) ResetPackages() {
	m.packages = nil
	m.clearedpackages = false
	m.removedpackages = nil
}

// Where appends a list predicates to the TargetMutation builder.
func (m *TargetMutation) Where(ps ...predicate.Target) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TargetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TargetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Target, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TargetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TargetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Target).
func (m *TargetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TargetMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, target.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TargetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case target.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TargetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case target.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Target field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TargetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case target.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Target field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TargetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TargetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TargetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Target numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TargetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TargetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TargetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Target nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TargetMutation) ResetField(name string) error {
	switch name {
	case target.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Target field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TargetMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.packages != nil {
		edges = append(edges, target.EdgePackages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TargetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case target.EdgePackages:
		ids := make([]ent.Value, 0, len(m.packages))
		for id := range m.packages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TargetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpackages != nil {
		edges = append(edges, target.EdgePackages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TargetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case target.EdgePackages:
		ids := make([]ent.Value, 0, len(m.removedpackages))
		for id := range m.removedpackages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TargetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpackages {
		edges = append(edges, target.EdgePackages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TargetMutation) EdgeCleared(name string) bool {
	switch name {
	case target.EdgePackages:
		return m.clearedpackages
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TargetMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Target unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TargetMutation) ResetEdge(name string) error {
	switch name {
	case target.EdgePackages:
		m.ResetPackages()
		return nil
	}
	return fmt.Errorf("unknown Target edge %s", name)
}
