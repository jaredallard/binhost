// Code generated by ent, DO NOT EDIT.

package target

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the target type in the database.
	Label = "target"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgePackages holds the string denoting the packages edge name in mutations.
	EdgePackages = "packages"
	// Table holds the table name of the target in the database.
	Table = "targets"
	// PackagesTable is the table that holds the packages relation/edge.
	PackagesTable = "pkgs"
	// PackagesInverseTable is the table name for the Pkg entity.
	// It exists in this package in order to avoid circular dependency with the "pkg" package.
	PackagesInverseTable = "pkgs"
	// PackagesColumn is the table column denoting the packages relation/edge.
	PackagesColumn = "target_id"
)

// Columns holds all SQL columns for target fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Target queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPackagesCount orders the results by packages count.
func ByPackagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPackagesStep(), opts...)
	}
}

// ByPackages orders the results by packages terms.
func ByPackages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPackagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PackagesTable, PackagesColumn),
	)
}
