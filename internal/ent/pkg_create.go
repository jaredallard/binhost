// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jaredallard/binhost/internal/ent/pkg"
	"github.com/jaredallard/binhost/internal/ent/target"
)

// PkgCreate is the builder for creating a Pkg entity.
type PkgCreate struct {
	config
	mutation *PkgMutation
	hooks    []Hook
}

// SetRepository sets the "repository" field.
func (pc *PkgCreate) SetRepository(s string) *PkgCreate {
	pc.mutation.SetRepository(s)
	return pc
}

// SetCategory sets the "category" field.
func (pc *PkgCreate) SetCategory(s string) *PkgCreate {
	pc.mutation.SetCategory(s)
	return pc
}

// SetName sets the "name" field.
func (pc *PkgCreate) SetName(s string) *PkgCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetVersion sets the "version" field.
func (pc *PkgCreate) SetVersion(s string) *PkgCreate {
	pc.mutation.SetVersion(s)
	return pc
}

// SetTargetID sets the "target_id" field.
func (pc *PkgCreate) SetTargetID(u uuid.UUID) *PkgCreate {
	pc.mutation.SetTargetID(u)
	return pc
}

// SetID sets the "id" field.
func (pc *PkgCreate) SetID(u uuid.UUID) *PkgCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PkgCreate) SetNillableID(u *uuid.UUID) *PkgCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetTarget sets the "target" edge to the Target entity.
func (pc *PkgCreate) SetTarget(t *Target) *PkgCreate {
	return pc.SetTargetID(t.ID)
}

// Mutation returns the PkgMutation object of the builder.
func (pc *PkgCreate) Mutation() *PkgMutation {
	return pc.mutation
}

// Save creates the Pkg in the database.
func (pc *PkgCreate) Save(ctx context.Context) (*Pkg, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PkgCreate) SaveX(ctx context.Context) *Pkg {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PkgCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PkgCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PkgCreate) defaults() {
	if _, ok := pc.mutation.ID(); !ok {
		v := pkg.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PkgCreate) check() error {
	if _, ok := pc.mutation.Repository(); !ok {
		return &ValidationError{Name: "repository", err: errors.New(`ent: missing required field "Pkg.repository"`)}
	}
	if _, ok := pc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Pkg.category"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Pkg.name"`)}
	}
	if _, ok := pc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Pkg.version"`)}
	}
	if _, ok := pc.mutation.TargetID(); !ok {
		return &ValidationError{Name: "target_id", err: errors.New(`ent: missing required field "Pkg.target_id"`)}
	}
	if _, ok := pc.mutation.TargetID(); !ok {
		return &ValidationError{Name: "target", err: errors.New(`ent: missing required edge "Pkg.target"`)}
	}
	return nil
}

func (pc *PkgCreate) sqlSave(ctx context.Context) (*Pkg, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PkgCreate) createSpec() (*Pkg, *sqlgraph.CreateSpec) {
	var (
		_node = &Pkg{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(pkg.Table, sqlgraph.NewFieldSpec(pkg.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Repository(); ok {
		_spec.SetField(pkg.FieldRepository, field.TypeString, value)
		_node.Repository = value
	}
	if value, ok := pc.mutation.Category(); ok {
		_spec.SetField(pkg.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(pkg.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Version(); ok {
		_spec.SetField(pkg.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if nodes := pc.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pkg.TargetTable,
			Columns: []string{pkg.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TargetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PkgCreateBulk is the builder for creating many Pkg entities in bulk.
type PkgCreateBulk struct {
	config
	err      error
	builders []*PkgCreate
}

// Save creates the Pkg entities in the database.
func (pcb *PkgCreateBulk) Save(ctx context.Context) ([]*Pkg, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pkg, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PkgMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PkgCreateBulk) SaveX(ctx context.Context) []*Pkg {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PkgCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PkgCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
